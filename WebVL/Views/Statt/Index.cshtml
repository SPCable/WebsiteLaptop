@using WebVL.Models
@using PagedList.Mvc;
@model PagedList.PagedList<WebVL.Models.Statt>

@*@model IEnumerable<WebVL.Models.Statt>*@

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <div>
                <h3>Bài Viết</h3>
                <h5 class="text-success">@TempData["EditOrder"]</h5>
                <h5 class="text-danger">@TempData["DeleteOrder"]</h5>
            </div>
        </div>

    </div>
</div>
<div class="main-card mb-3 card">

    <div class="card-body">

        <h5 class="card-title">Danh Sách Bài Viết</h5>


        <form class="needs-validation" novalidate>
            <div class="form-row">
                <table class="table">
                    <tr>
                        <th>
                            Chi Tiết Bài Viết
                        </th>
                        <th>
                            Ngày Đăng
                        </th>
                        <th>
                            Đăng Bởi
                        </th>
                        <th>
                            Lượt Xem
                        </th>
                        <th></th>
                    </tr>

                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Details)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Daypost)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Postby)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.View)
                            </td>
                            <td>
                                @Html.ActionLink("Edit", "Edit", new { id = item.Idpost }) -
                                @*@Html.ActionLink("Details", "Details", new { id = item.Idpost }) -*@
                                @Html.ActionLink("Delete", "Delete", new { id = item.Idpost })
                            </td>
                        </tr>
                    }

                </table>
                <div class="page-number" style="position:relative; left:1030px">
                    @Html.PagedListPager(Model, page => Url.Action("Index", new { page = page }))
                </div>
                <style>
                    .page-number li {
                        display: inline;
                    }
                </style>
            </div>
        </form>

        <script>
            // Example starter JavaScript for disabling form submissions if there are invalid fields
            (function () {
                'use strict';
                window.addEventListener('load', function () {
                    // Fetch all the forms we want to apply custom Bootstrap validation styles to
                    var forms = document.getElementsByClassName('needs-validation');
                    // Loop over them and prevent submission
                    var validation = Array.prototype.filter.call(forms, function (form) {
                        form.addEventListener('submit', function (event) {
                            if (form.checkValidity() === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                            form.classList.add('was-validated');
                        }, false);
                    });
                }, false);
            })();
        </script>
    </div>
</div>